/**
 * H√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª´ dashboard.html SAU KHI
 * t·∫•t c·∫£ th∆∞ vi·ªán (Chart.js, jsPDF, Firebase compat) ƒë√£ ƒë∆∞·ª£c t·∫£i
 * v√† Firebase auth ƒë√£ x√°c nh·∫≠n ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p.
 * Nh·∫≠n ƒë·ªëi t∆∞·ª£ng user (v9) ƒë√£ ƒëƒÉng nh·∫≠p.
 */
function runDashboard(loggedInUser) { // *** NH·∫¨N USER T·ª™ dashboard.html ***
    console.log("runDashboard() initializing with user:", loggedInUser);

    // --- Get Firebase Services (v8 Compat) ---
    const auth = firebase.auth();
    const db = firebase.firestore();
    const currentUser = loggedInUser; // S·ª≠ d·ª•ng user v9 ƒë∆∞·ª£c truy·ªÅn v√†o

    // *** KI·ªÇM TRA USER NGAY L·∫¨P T·ª®C ***
    if (!currentUser || !currentUser.email || !currentUser.uid) {
        console.error("CRITICAL: Invalid user object passed to runDashboard(), redirecting...", loggedInUser);
        window.location.replace('index.html'); // D√πng replace ƒë·ªÉ kh√¥ng l∆∞u v√†o history
        return;
    }
    const userEmail = currentUser.email;
    const userId = currentUser.uid;
    console.log("Current user (passed from v9):", userId, userEmail);


    // --- DOM Elements Cache (L·∫•y an to√†n h∆°n) ---
    let initializationError = false;
    function getElement(id, required = true) {
        const el = document.getElementById(id);
        if (!el && required) { console.error(`CRITICAL: Element ID "${id}" not found!`); initializationError = true; }
        return el;
    }
     function querySelector(selector, required = true) {
        const el = document.querySelector(selector);
        if (!el && required) { console.error(`CRITICAL: Element selector "${selector}" not found!`); initializationError = true; }
        return el;
    }
     function querySelectorAll(selector, required = true) {
        const els = document.querySelectorAll(selector);
        if (els.length === 0 && required) { console.warn(`Required elements not found for selector "${selector}".`); }
        return els;
     }

    // L·∫•y c√°c element ch√≠nh ngay l·∫≠p t·ª©c
    const userEmailDisplay = getElement('user-email-display', false);
    const logoutButtonSimple = getElement('logout-button-simple', false);
    const tabs = querySelectorAll(".tab", false);
    const tabContents = querySelectorAll(".tab-content", false);
    const mailComposeModal = getElement('mail-compose-modal', false);
    const mailComposeCloseBtn = getElement('mail-compose-close', false);
    const mailSendBtn = getElement('mail-send-btn', false);
    const mailStatus = getElement('mail-status', false);
    const mailToInput = getElement('mail-to', false);
    const mailSubjectInput = getElement('mail-subject', false);
    const mailBodyInput = getElement('mail-body', false);
    const mailComposeBtnDesktop = getElement('mail-compose-new-btn-desktop', false);
    const mailComposeFab = getElement('mail-compose-fab', false);

    // C√°c element s·∫Ω ƒë∆∞·ª£c l·∫•y tr·ªÖ h∆°n trong h√†m
    let mailListDiv = null;
    let mailListHeader = null;
    let mailFolders = null; // Bao g·ªìm c·∫£ desktop v√† mobile
    let mailReaderContainer = null;
    let mailReaderContent = null;
    let mailReaderPlaceholder = null;
    let readerSubject = null;
    let readerFrom = null;
    let readerTo = null;
    let readerTimestamp = null;
    let readerBody = null;
    let mailReaderBackBtn = null;
    let currentMailListener = null;
    let currentSelectedFolder = 'inbox';
    let aiDataUnsubscribe = null;

    if (initializationError) {
        alert("L·ªói kh·ªüi t·∫°o giao di·ªán nghi√™m tr·ªçng. Vui l√≤ng ki·ªÉm tra Console (F12) v√† th·ª≠ t·∫£i l·∫°i trang.");
        return;
    }

    // --- Helper Functions ---
    function setActiveTab(tabId) { /* ... Gi·ªØ nguy√™n h√†m setActiveTab ... */
        if (!tabs || !tabContents) { console.error("Tabs/Contents missing in setActiveTab"); return; }
        tabs.forEach(t => t.classList.remove("active"));
        tabContents.forEach(c => c.classList.remove("active"));
        const activeTabButton = document.querySelector(`.tab[data-tab="${tabId}"]`);
        const activeTabContent = document.getElementById(tabId);
        if (activeTabButton) activeTabButton.classList.add("active");
        if (activeTabContent) activeTabContent.classList.add("active");
        else console.warn("Content for tab", tabId, "not found!");
        const mailSection = document.getElementById('mail');
        if (tabId === 'mail' && !currentMailListener && mailSection && mailSection.classList.contains('active')) {
            console.log("Loading inbox messages because Mail tab activated...");
            initializeMailElements(); // *** G·ªåI INIT MAIL ELEMENTS ***
            loadMessages('inbox');
        } else if (tabId !== 'mail' && currentMailListener) {
            console.log("Unsubscribing from mail listener...");
            currentMailListener(); currentMailListener = null;
        }
        if (tabId !== 'mail') closeMailDetail();
     }

     function formatTimestamp(timestamp) { /* ... Gi·ªØ nguy√™n h√†m formatTimestamp ... */
        if (!timestamp || !timestamp.toDate) return "N/A";
        try { return timestamp.toDate().toLocaleString('vi-VN', { dateStyle: 'short', timeStyle: 'short' }); }
        catch (e) { console.error("Timestamp format error:", timestamp, e); return "Invalid Date"; }
     }

    // --- Initialization ---

    // 1. Tab Switching Logic (Gi·ªØ nguy√™n)
    if (tabs && tabs.length > 0) {
        tabs.forEach(tab => {
            tab.addEventListener("click", (e) => {
                const tabId = e.currentTarget.dataset.tab;
                 if (tabId) setActiveTab(tabId);
            });
        });
    } else { console.warn("No tab elements found."); }

    // 2. Display User Email & Logout Button (Gi·ªØ nguy√™n)
    if (userEmailDisplay) userEmailDisplay.textContent = userEmail;
    if (logoutButtonSimple) {
        logoutButtonSimple.onclick = () => {
             if (currentMailListener) { currentMailListener(); currentMailListener = null; }
             if (aiDataUnsubscribe) { aiDataUnsubscribe(); aiDataUnsubscribe = null; }
             console.log("Logging out...");
             firebase.auth().signOut().then(() => { window.location.href = 'index.html'; })
               .catch(err => console.error("Logout error:", err));
        }
    }

    // --- C√°c Ch·ª©c nƒÉng C≈© (Gi·ªØ nguy√™n) ---

    // 3. Chart demo (Gi·ªØ nguy√™n)
    try { /* ... Code chart g·ªëc ... */
        const ctx = document.getElementById('quantChart');
        if (ctx && typeof Chart !== 'undefined') { new Chart(ctx, { type: 'line', data: { labels: ['T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'CN'], datasets: [{ label: 'BTC/USD', data: [67000, 67500, 67200, 68000, 68500, 69000, 68800], borderColor: '#ffb300', tension: 0.3, fill: true, backgroundColor: 'rgba(255, 230, 150, 0.3)'}] }, options: { responsive: true } }); }
        else if(ctx) { console.warn("Chart.js not loaded yet."); }
    } catch(e) { console.error("L·ªói Chart:", e); }

    // 4. AI Console demo (Gi·ªØ nguy√™n)
    const runAIButton = document.getElementById("runAI");
    if (runAIButton) { /* ... Code AI console g·ªëc ... */
         runAIButton.onclick = () => { const input = document.getElementById("aiInput").value; const output = document.getElementById("aiOutput"); if (!input) return; output.innerHTML = `<b>B·∫°n:</b> ${input}<br><b>AI:</b> ƒêang x·ª≠ l√Ω... üîÑ`; setTimeout(() => { output.innerHTML = `<b>AI:</b> Kh·∫£ nƒÉng BTC tƒÉng 4h t·ªõi l√† 71%.`; }, 1500); };
     } else { console.warn("N√∫t Run AI kh√¥ng t·ªìn t·∫°i."); }

    // 5. Xu·∫•t PDF demo (Gi·ªØ nguy√™n)
    const exportPDFButton = document.getElementById("exportPDF");
    if (exportPDFButton) { /* ... Code PDF g·ªëc ... */
         exportPDFButton.onclick = () => { try { if (typeof jspdf === 'undefined' || typeof jspdf.jsPDF === 'undefined') { console.error('jsPDF not loaded.'); alert('PDF ch∆∞a s·∫µn s√†ng.'); return; } const { jsPDF } = window.jspdf; const pdf = new jsPDF(); pdf.text("B√ÅO C√ÅO AI INVESTMENT BRAIN", 10, 10); pdf.text("T·ªïng h·ª£p d·ªØ li·ªáu m√¥ ph·ªèng BTC", 10, 20); pdf.text("X√°c su·∫•t tƒÉng: 71%", 10, 30); pdf.text("Khuy·∫øn ngh·ªã: Long 20% v·ªën", 10, 40); pdf.save("AI_Investment_Report.pdf"); } catch(e) { console.error("L·ªói PDF:", e); alert("L·ªói xu·∫•t PDF"); } };
     } else { console.warn("N√∫t Xu·∫•t PDF kh√¥ng t·ªìn t·∫°i."); }


    // ===============================================
    // == B·∫ÆT ƒê·∫¶U CODE M·ªöI CHO APP MAIL (3 C·ªòT, ƒê√£ s·ª≠a l·ªói) ==
    // ===============================================

     // --- L·∫•y Elements Mail v√† G·∫Øn S·ª± Ki·ªán (Ch·∫°y 1 l·∫ßn khi tab mail ƒë∆∞·ª£c m·ªü) ---
     let mailInitialized = false;
     function initializeMailElements() {
        if (mailInitialized) return; // Ch·ªâ ch·∫°y 1 l·∫ßn

        console.log("Initializing Mail Elements...");
        mailListDiv = getElement('mail-list');
        mailListHeader = getElement('mail-list-header');
        mailFolders = querySelectorAll('.mail-folder', false); // Desktop folders
        const mobileFolderButtons = querySelectorAll('.mail-mobile-folder-selector .folder-btn', false); // Mobile folders
        mailReaderContainer = querySelector('.mail-reader-container');
        mailReaderContent = getElement('mail-reader-content');
        mailReaderPlaceholder = getElement('mail-reader-placeholder');
        readerSubject = getElement('reader-subject');
        readerFrom = getElement('reader-from');
        readerTo = getElement('reader-to');
        readerTimestamp = getElement('reader-timestamp');
        readerBody = getElement('reader-body');
        mailReaderBackBtn = getElement('mail-reader-back-btn');

        // G·ªôp 2 nh√≥m n√∫t folder
        const allFolderButtons = Array.from(mailFolders || []).concat(Array.from(mobileFolderButtons || []));

        // G·∫Øn s·ª± ki·ªán n√∫t back
        if (mailReaderBackBtn) {
            mailReaderBackBtn.addEventListener('click', closeMailDetail);
        } else { console.warn("N√∫t back mail reader kh√¥ng t·ªìn t·∫°i"); }

        // G·∫Øn s·ª± ki·ªán n√∫t folder
        if (allFolderButtons.length > 0) {
            allFolderButtons.forEach(button => {
                const handleFolderClick = () => {
                    const folder = button.dataset.folder;
                    console.log("Folder button clicked:", folder);
                    if (folder && folder !== currentSelectedFolder) {
                        loadMessages(folder);
                    }
                };
                 // G·ª° listener c≈© (ph√≤ng ng·ª´a)
                // button.removeEventListener('click', handleFolderClick); // C·∫ßn l∆∞u tr·ªØ tham chi·∫øu h√†m ƒë·ªÉ g·ª°
                button.addEventListener('click', handleFolderClick);
            });
        } else { console.warn("Kh√¥ng t√¨m th·∫•y n√∫t ch·ªçn folder mail."); }

         // G·∫Øn s·ª± ki·ªán n√∫t so·∫°n th∆∞ (c·∫£ desktop v√† mobile FAB)
        const openComposeModal = () => { if(mailComposeModal) mailComposeModal.style.display = 'flex'; };
        if (mailComposeBtnDesktop) mailComposeBtnDesktop.onclick = openComposeModal;
        if (mailComposeFab) mailComposeFab.onclick = openComposeModal;

        mailInitialized = true;
        console.log("Mail Elements Initialized.");
     }


    // --- Logic Hi·ªÉn th·ªã Chi ti·∫øt Mail ---
    function showMailDetail(msgData) {
        // *** L·∫•y l·∫°i element ngay tr∆∞·ªõc khi d√πng ƒë·ªÉ ch·∫Øc ch·∫Øn ***
        readerSubject = getElement('reader-subject');
        readerFrom = getElement('reader-from');
        readerTo = getElement('reader-to');
        readerTimestamp = getElement('reader-timestamp');
        readerBody = getElement('reader-body');
        mailReaderContent = getElement('mail-reader-content');
        mailReaderPlaceholder = getElement('mail-reader-placeholder');
        mailReaderContainer = querySelector('.mail-reader-container');
        mailLayout = querySelector('.mail-layout-v3');
        mailReaderBackBtn = getElement('mail-reader-back-btn');


        if (!mailReaderContainer || !readerSubject || !readerFrom || !readerTo || !readerTimestamp || !readerBody || !mailReaderContent || !mailReaderPlaceholder) {
             console.error("M·ªôt ho·∫∑c nhi·ªÅu element ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt mail kh√¥ng t·ªìn t·∫°i!"); return;
        }

        readerSubject.textContent = msgData.subject || "[Kh√¥ng c√≥ ch·ªß ƒë·ªÅ]";
        readerFrom.textContent = msgData.from || "N/A";
        readerTo.textContent = msgData.to || "N/A";
        readerTimestamp.textContent = formatTimestamp(msgData.timestamp);
        readerBody.textContent = msgData.body || "[N·ªôi dung tr·ªëng]";

        mailReaderContent.style.display = 'flex';
        mailReaderPlaceholder.style.display = 'none';
        mailReaderContainer.classList.add('active');

        if (window.innerWidth <= 992) {
            if(mailLayout) mailLayout.classList.add('reading-mode');
            if(mailReaderBackBtn) mailReaderBackBtn.style.display = 'block';
        } else {
             if(mailReaderBackBtn) mailReaderBackBtn.style.display = 'none';
        }
    }

    // --- Logic ƒê√≥ng Chi ti·∫øt Mail ---
    function closeMailDetail() {
         // *** L·∫•y l·∫°i element ngay tr∆∞·ªõc khi d√πng ***
         mailReaderContainer = querySelector('.mail-reader-container', false);
         mailReaderContent = getElement('mail-reader-content', false);
         mailReaderPlaceholder = getElement('mail-reader-placeholder', false);
         mailLayout = querySelector('.mail-layout-v3', false);
         mailReaderBackBtn = getElement('mail-reader-back-btn', false);
         mailListDiv = getElement('mail-list', false); // L·∫•y c·∫£ mailListDiv

         if (!mailReaderContainer || !mailReaderContent || !mailReaderPlaceholder) return;
         mailReaderContent.style.display = 'none';
         mailReaderPlaceholder.style.display = 'flex';
         mailReaderContainer.classList.remove('active');
         if(mailLayout) mailLayout.classList.remove('reading-mode');
         if(mailReaderBackBtn) mailReaderBackBtn.style.display = 'none';
         const activeItem = mailListDiv ? mailListDiv.querySelector('.mail-item.active') : null;
         if(activeItem) activeItem.classList.remove('active');
    }

    // --- Logic Nh·∫≠n Mail v√† Hi·ªÉn th·ªã Danh s√°ch (ƒê√£ s·ª≠a l·ªói index) ---
    function loadMessages(folder = 'inbox') {
        currentSelectedFolder = folder;
        // *** L·∫•y element NGAY KHI C·∫¶N ***
        mailListDiv = getElement('mail-list'); // L·∫•y l·∫°i ·ªü ƒë√¢y
        mailListHeader = getElement('mail-list-header'); // L·∫•y l·∫°i ·ªü ƒë√¢y
        const desktopFolderButtons = querySelectorAll('.mail-folder', false);
        const mobileFolderButtons = querySelectorAll('.mail-mobile-folder-selector .folder-btn', false);

        if (!mailListDiv || !mailListHeader ) { // Ch·ªâ c·∫ßn ki·ªÉm tra 2 c√°i n√†y l√† ƒë·ªß
            console.error("Mail list UI elements missing in loadMessages!");
            return;
        }

        mailListHeader.textContent = (folder === 'inbox' ? 'H·ªôp th∆∞ ƒë·∫øn' : 'Th∆∞ ƒë√£ g·ª≠i');
        // C·∫≠p nh·∫≠t n√∫t active cho c·∫£ 2 nh√≥m
        const allFolderButtons = Array.from(desktopFolderButtons || []).concat(Array.from(mobileFolderButtons || []));
        allFolderButtons.forEach(btn => { btn.classList.toggle('active', btn.dataset.folder === folder); });

        // H·ªßy listener c≈©
        if (currentMailListener) { console.log("Unsubscribing previous mail listener."); currentMailListener(); }

        mailListDiv.innerHTML = `<p class="loading-text">ƒêang t·∫£i tin nh·∫Øn...</p>`;
        closeMailDetail();

        let q;
        try { /* ... T·∫°o query q nh∆∞ c≈© ... */
            if (folder === 'inbox') { q = db.collection("messages").where("to", "==", userEmail).orderBy("timestamp", "desc").limit(50); }
            else { q = db.collection("messages").where("from", "==", userEmail).orderBy("timestamp", "desc").limit(50); }
        } catch (e) { /* ... X·ª≠ l√Ω l·ªói t·∫°o query nh∆∞ c≈© ... */
             console.error("Query error:", e); if (mailListDiv) mailListDiv.innerHTML = `<p class="loading-text" style='color:red;'>L·ªói truy v·∫•n.</p>`; return;
         }

        currentMailListener = q.onSnapshot((querySnapshot) => {
            console.log(`${folder} snapshot received, size:`, querySnapshot.size);
            // *** PH·∫¢I L·∫§Y L·∫†I mailListDiv M·ªñI L·∫¶N SNAPSHOT V·ªÄ ***
            const currentMailListDiv = getElement('mail-list');
            if (!currentMailListDiv) {
                 console.warn("mail-list element no longer exists when snapshot arrived.");
                 if(currentMailListener) { currentMailListener(); currentMailListener = null; }
                 return;
            }

            if (querySnapshot.empty) { currentMailListDiv.innerHTML = `<p class="loading-text">Kh√¥ng c√≥ tin nh·∫Øn n√†o.</p>`; return; }
            currentMailListDiv.innerHTML = "";
            querySnapshot.forEach((doc) => { /* ... Code t·∫°o msgElement nh∆∞ c≈© ... */
                const msg = doc.data();
                if (!msg || typeof msg !== 'object' || !msg.subject || !msg.body || (!msg.from && folder === 'inbox') || (!msg.to && folder === 'sent')) { console.warn("Invalid message data:", msg); return; }
                const msgElement = document.createElement('div'); msgElement.className = 'mail-item';
                const sentTime = formatTimestamp(msg.timestamp);
                const participant = (folder === 'inbox') ? msg.from : `ƒê·∫øn: ${msg.to}`;
                msgElement.innerHTML = `<div class="mail-item-sender">${participant || 'N/A'}</div> <div class="mail-item-subject">${msg.subject}</div> <div class="mail-item-preview">${msg.body.substring(0, 40)}...</div> <small>${sentTime}</small>`;
                msgElement.onclick = () => { showMailDetail(msg); document.querySelectorAll('#mail-list .mail-item').forEach(item => item.classList.remove('active')); msgElement.classList.add('active'); };
                currentMailListDiv.appendChild(msgElement);
             });
        }, (error) => { /* ... X·ª≠ l√Ω l·ªói onSnapshot nh∆∞ c≈© ... */
            console.error(`L·ªói nh·∫≠n tin (${folder}): `, error);
             const currentMailListDiv = getElement('mail-list'); // L·∫•y l·∫°i
             if (currentMailListDiv) {
                if (error.code === 'failed-precondition') {
                    currentMailListDiv.innerHTML = `<p class="loading-text" style='color:red;'>L·ªói: C·∫ßn t·∫°o ch·ªâ m·ª•c (index) Firestore. <br>Ki·ªÉm tra Console (F12) ƒë·ªÉ l·∫•y link.</p>`;
                    const linkMatch = error.message.match(/https:\/\/[^\s]+/);
                    if (linkMatch) { console.error("Firestore index needed:", linkMatch[0]); alert("L·ªói Firestore: C·∫ßn t·∫°o Index (xem Console F12)."); }
                    else { alert("L·ªói Firestore: C·∫ßn t·∫°o Index (xem Console F12)."); }
                } else if (error.code === 'permission-denied') { currentMailListDiv.innerHTML = `<p class="loading-text" style='color:red;'>L·ªói: Kh√¥ng c√≥ quy·ªÅn ƒë·ªçc. Ki·ªÉm tra Security Rules.</p>`; }
                 else { currentMailListDiv.innerHTML = `<p class="loading-text" style='color:red;'>L·ªói t·∫£i tin nh·∫Øn (${error.code}).</p>`; }
             }
             if (currentMailListener) { currentMailListener(); currentMailListener = null;}
         });
    }

    // --- K√≠ch ho·∫°t chuy·ªÉn Folder ---
    initializeMailElements(); // G·ªçi h√†m n√†y ƒë·ªÉ l·∫•y v√† g·∫Øn s·ª± ki·ªán cho c√°c n√∫t folder mail

     // --- Logic Modal So·∫°n th∆∞ (Gi·ªØ nguy√™n) ---
    if (mailComposeModal && mailComposeCloseBtn) { // Ki·ªÉm tra element t·ªìn t·∫°i
        if (mailComposeCloseBtn) mailComposeCloseBtn.onclick = () => { mailComposeModal.style.display = 'none'; };
        window.onclick = (event) => { if (event.target == mailComposeModal) mailComposeModal.style.display = "none"; };
    } else { console.warn("Compose modal elements not found."); }


    // --- Logic G·ª≠i Mail (Gi·ªØ nguy√™n) ---
    if (sendBtn && mailToInput && mailSubjectInput && mailBodyInput && mailStatus) { // Ki·ªÉm tra element
        sendBtn.onclick = async () => { /* ... Code g·ª≠i mail nh∆∞ c≈© ... */
            const to = mailToInput.value.trim(); const subject = mailSubjectInput.value.trim(); const body = mailBodyInput.value.trim();
            if (!to || !subject || !body) { mailStatus.textContent = "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin!"; mailStatus.style.color = "red"; return; }
            if (!/\S+@\S+\.\S+/.test(to)) { mailStatus.textContent = "Email nh·∫≠n kh√¥ng h·ª£p l·ªá!"; mailStatus.style.color = "red"; return; }
            sendBtn.textContent = "ƒêang g·ª≠i..."; sendBtn.disabled = true; mailStatus.textContent = "";
            try { await db.collection("messages").add({ to: to, from: userEmail, subject: subject, body: body, timestamp: firebase.firestore.FieldValue.serverTimestamp() }); mailStatus.textContent = "G·ª≠i th√†nh c√¥ng!"; mailStatus.style.color = "green"; setTimeout(() => { mailToInput.value = ""; mailSubjectInput.value = ""; mailBodyInput.value = ""; if(mailComposeModal) mailComposeModal.style.display = 'none'; if(mailStatus) mailStatus.textContent = ""; }, 1500); }
            catch (e) { console.error("L·ªói g·ª≠i:", e); mailStatus.textContent = "G·ª≠i l·ªói!"; mailStatus.style.color = "red"; }
            finally { setTimeout(() => { if (sendBtn) { sendBtn.textContent = "G·ª≠i"; sendBtn.disabled = false; } }, 1500); }
         };
    } else { console.warn("Compose mail button or inputs not found."); }


    // --- K√≠ch ho·∫°t t·∫£i mail ban ƒë·∫ßu n·∫øu tab Mail active ---
    setTimeout(() => {
        const currentActiveTab = document.querySelector('.tab.active');
        if (currentActiveTab && currentActiveTab.dataset.tab === 'mail') {
            if (!currentMailListener) { loadMessages('inbox'); }
        }
    }, 250); // TƒÉng ƒë·ªô tr·ªÖ h∆°n n·ªØa


    // ===============================================
    // == K·∫æT TH√öC CODE M·ªöI CHO APP MAIL ==
    // ===============================================


    // ===============================================
    // == CODE C≈®: ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU AI REAL-TIME (Gi·ªØ nguy√™n) ==
    // ===============================================
    const systemDataRef = db.collection('system_data');
    // Ch·ªâ l·∫Øng nghe n·∫øu √≠t nh·∫•t m·ªôt element AI data t·ªìn t·∫°i
    if (document.getElementById('live-btc-price-value') || document.getElementById('live-sentiment-value')) {
        aiDataUnsubscribe = systemDataRef.onSnapshot((querySnapshot) => { // G√°n h√†m h·ªßy v√†o bi·∫øn
            console.log("AI data update received...");
            querySnapshot.forEach((doc) => { /* ... Code c·∫≠p nh·∫≠t UI AI data nh∆∞ c≈© ... */
                const data = doc.data(); const genericLastUpdatedText = data.last_updated ? `C·∫≠p nh·∫≠t: ${formatTimestamp(data.last_updated)}` : "ƒêang t·∫£i..."; try {
                const btcPriceEl = getElement('live-btc-price-value', false); const lastUpdatedElQ = getElement('live-last-updated', false); const quantSummaryElQ = getElement('quant-summary', false);
                const sentimentEl = getElement('live-sentiment-value', false); const sentimentSourceElS = getElement('live-sentiment-source', false); const sentimentSummaryElS = getElement('sentiment-summary', false); const sentimentFillElS = querySelector('#sentiment .fill', false); const sentimentScoreTextElS = getElement('sentiment-score-text', false);
                const recommendationEl = getElement('live-recommendation-value', false); const recommendationReasonElA = getElement('live-recommendation-reason', false);
                const riskListElR = getElement('risk-list', false);
                switch (doc.id) {
                     case 'quant_ai': if (btcPriceEl && data.btc_price !== undefined) btcPriceEl.textContent = `$${data.btc_price.toLocaleString('en-US')}`; if (lastUpdatedElQ) lastUpdatedElQ.textContent = `Quant: ${data.last_updated ? formatTimestamp(data.last_updated) : 'N/A'}`; if (quantSummaryElQ) quantSummaryElQ.textContent = `AI nh·∫≠n ƒë·ªãnh: ${data.trend || 'N/A'}, RSI=${data.rsi || 'N/A'}`; break;
                     case 'sentiment_ai': if (sentimentEl && data.score !== undefined) sentimentEl.textContent = `${data.score}%`; if (sentimentSourceElS && data.source) sentimentSourceElS.textContent = `Ngu·ªìn: ${data.source}`; if (sentimentSummaryElS) sentimentSummaryElS.textContent = `Ph√¢n t√≠ch t√¢m l√Ω t·ª´ ${data.source || 'N/A'}. ƒêi·ªÉm: ${data.score || 'N/A'}/100`; if(sentimentFillElS) sentimentFillElS.style.width = `${data.score || 0}%`; if(sentimentScoreTextElS) sentimentScoreTextElS.textContent = `${data.score || 0}/100`; break;
                     case 'advisor_ai': if (recommendationEl && data.recommendation) recommendationEl.textContent = data.recommendation; if (recommendationReasonElA && data.reasoning) recommendationReasonElA.textContent = data.reasoning; break;
                     case 'risk_ai': if (riskListElR && data.volatility !== undefined && data.max_drawdown !== undefined) { riskListElR.innerHTML = `<li>ƒê·ªô bi·∫øn ƒë·ªông: <b>${data.volatility}%</b></li><li>Max Drawdown: <b>${data.max_drawdown}%</b></li><li>V·ªën t·ªëi ƒëa: <b>${data.max_leverage || 'N/A'}</b></li><li><small>Risk AI: ${data.last_updated ? formatTimestamp(data.last_updated) : 'N/A'}</small></li>`; } else if (riskListElR) { riskListElR.innerHTML = '<li>ƒêang t·∫£i...</li>'; } break;
                 } } catch (e) { console.error(`Error UI update for ${doc.id}:`, e); }
             });
        }, (error) => { console.error("L·ªói l·∫Øng nghe AI data: ", error); const btcPriceEl = getElement('live-btc-price-value', false); if (btcPriceEl) btcPriceEl.textContent = "L·ªói"; });
    } else { console.warn("Kh√¥ng t√¨m th·∫•y element AI data, b·ªè qua listener."); }

    console.log("Dashboard initialization complete.");

} // --- END of runDashboard() ---